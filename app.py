import streamlit as st
import pandas as pd
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.tree import DecisionTreeRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

# T√™n t·ªáp d·ªØ li·ªáu m·ªõi
DATA_FILE = "teen_phone_addiction_dataset.csv"

# --- H√†m Hu·∫•n luy·ªán M√¥ h√¨nh ---
@st.cache_resource
def get_model(file_path):
    """
    H√†m n√†y t·∫£i d·ªØ li·ªáu, CHIA T√ÅCH, ti·ªÅn x·ª≠ l√Ω, hu·∫•n luy·ªán
    v√† CH·∫§M ƒêI·ªÇM m√¥ h√¨nh.
    N√≥ c≈©ng tr·∫£ v·ªÅ c√°c gi√° tr·ªã cho UI (dropdowns v√† sliders).
    """
    # 1. T·∫£i d·ªØ li·ªáu
    try:
        df = pd.read_csv(file_path)
    except FileNotFoundError:
        st.error(f"L·ªói: Kh√¥ng t√¨m th·∫•y t·ªáp d·ªØ li·ªáu '{file_path}'.")
        st.error("Vui l√≤ng ƒë·∫£m b·∫£o t·ªáp CSV n·∫±m c√πng th∆∞ m·ª•c v·ªõi t·ªáp app.py.")
        return None, None, None, None, None, None

    # 2. X√°c ƒë·ªãnh ƒë·∫∑c tr∆∞ng v√† m·ª•c ti√™u
    target_column = 'Addiction_Level'
    
    # Ch·ªçn c√°c ƒë·∫∑c tr∆∞ng m·ªõi d·ª±a tr√™n d·ªØ li·ªáu
    features = [
        'Age',
        'Gender',
        'School_Grade',
        'Daily_Usage_Hours',
        'Sleep_Hours',
        'Academic_Performance',
        'Anxiety_Level',
        'Depression_Level',
        'Self_Esteem',
        'Phone_Usage_Purpose'
    ]
    
    X_all = df[features]
    y_all = df[target_column]

    # Ph√¢n lo·∫°i ƒë·∫∑c tr∆∞ng
    numerical_features = [
        'Age', 
        'Daily_Usage_Hours', 
        'Sleep_Hours', 
        'Academic_Performance', 
        'Anxiety_Level', 
        'Depression_Level', 
        'Self_Esteem'
    ]
    categorical_features = [
        'Gender', 
        'School_Grade', 
        'Phone_Usage_Purpose'
    ]

    # 3. Chia d·ªØ li·ªáu: 80% train, 20% test
    X_train, X_test, y_train, y_test = train_test_split(
        X_all, y_all, test_size=0.2, random_state=42
    )

    # 4. T·∫°o b·ªô ti·ªÅn x·ª≠ l√Ω
    preprocessor = ColumnTransformer(
        transformers=[
            ('num', 'passthrough', numerical_features),
            ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough'
    )

    # 5. T·∫°o Pipeline v·ªõi m√¥ h√¨nh ƒë√£ "kh·ª≠ nhi·ªÖu"
    model = DecisionTreeRegressor(
        random_state=42,
        max_depth=7,
        min_samples_leaf=10,
        min_samples_split=20
    )

    pipeline = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('regressor', model)
    ])

    # 6. Hu·∫•n luy·ªán m√¥ h√¨nh CH·ªà tr√™n 80% d·ªØ li·ªáu (t·∫≠p Train)
    pipeline.fit(X_train, y_train)

    # 7. Ch·∫•m ƒëi·ªÉm m√¥ h√¨nh tr√™n 20% d·ªØ li·ªáu l·∫° (t·∫≠p Test)
    y_pred = pipeline.predict(X_test)
    model_score = r2_score(y_test, y_pred)

    # 8. L·∫•y c√°c gi√° tr·ªã UI (cho selectbox v√† slider)
    unique_genders = df['Gender'].unique()
    unique_grades = sorted(df['School_Grade'].unique())
    unique_purposes = df['Phone_Usage_Purpose'].unique()
    
    # T·∫°o m·ªôt dict ch·ª©a min/max cho c√°c thanh tr∆∞·ª£t
    slider_ranges = {
        'Age': (int(df['Age'].min()), int(df['Age'].max())),
        'Daily_Usage_Hours': (0.0, 12.0), # Gi·ªØ c·ªë ƒë·ªãnh ƒë·ªÉ d·ªÖ nh·∫≠p
        'Sleep_Hours': (3.0, 10.0), # Gi·ªØ c·ªë ƒë·ªãnh
        'Academic_Performance': (int(df['Academic_Performance'].min()), int(df['Academic_Performance'].max())),
        'Anxiety_Level': (int(df['Anxiety_Level'].min()), int(df['Anxiety_Level'].max())),
        'Depression_Level': (int(df['Depression_Level'].min()), int(df['Depression_Level'].max())),
        'Self_Esteem': (int(df['Self_Esteem'].min()), int(df['Self_Esteem'].max()))
    }

    return pipeline, unique_genders, unique_grades, unique_purposes, slider_ranges, model_score

# --- T·∫£i m√¥ h√¨nh ---
try:
    (
        pipeline, 
        unique_genders, 
        unique_grades, 
        unique_purposes, 
        slider_ranges, 
        model_score
    ) = get_model(DATA_FILE)
    
    model_loaded = (pipeline is not None)
    
except Exception as e:
    st.error(f"L·ªói khi t·∫£i ho·∫∑c hu·∫•n luy·ªán m√¥ h√¨nh: {e}")
    model_loaded = False


# --- B·∫ÆT ƒê·∫¶U X√ÇY D·ª∞NG GIAO DI·ªÜN STREAMLIT ---

st.set_page_config(page_title="D·ª± ƒëo√°n Nghi·ªán ƒêi·ªán tho·∫°i", layout="wide")
st.title("üì± Demo M√¥ h√¨nh D·ª± ƒëo√°n M·ª©c ƒë·ªô Nghi·ªán ƒêi·ªán tho·∫°i (Teen)")
st.write("Nh·∫≠p th√¥ng tin c·ªßa h·ªçc sinh v√†o thanh b√™n tr√°i ƒë·ªÉ m√¥ h√¨nh d·ª± ƒëo√°n ƒëi·ªÉm nghi·ªán (`Addiction_Level`).")
st.write("---")

if model_loaded:
    # --- Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë c·ªßa m√¥ h√¨nh ---
    st.subheader("ƒê√°nh gi√° ƒë·ªô ·ªïn ƒë·ªãnh c·ªßa m√¥ h√¨nh")
    st.metric(label="ƒêi·ªÉm tin c·∫≠y R-squared (tr√™n d·ªØ li·ªáu Test)", value=f"{model_score:.4f}")
    if model_score < 0.3:
        st.error("ƒêi·ªÉm qu√° th·∫•p! M√¥ h√¨nh n√†y kh√¥ng ƒë√°ng tin c·∫≠y.")
    elif model_score < 0.6:
        st.warning(f"ƒêi·ªÉm trung b√¨nh ({model_score:.1%}). M√¥ h√¨nh ch·ªâ gi·∫£i th√≠ch ƒë∆∞·ª£c m·ªôt ph·∫ßn nh·ªè.")
    else:
        st.success(f"ƒêi·ªÉm kh√° t·ªët ({model_score:.1%})! M√¥ h√¨nh gi·∫£i th√≠ch ƒë∆∞·ª£c ph·∫ßn l·ªõn d·ªØ li·ªáu.")
    st.caption("ƒêi·ªÉm $R^2$ (t·ª´ -‚àû ƒë·∫øn 1.0) ƒëo l∆∞·ªùng m·ª©c ƒë·ªô m√¥ h√¨nh d·ª± ƒëo√°n t·ªët tr√™n *d·ªØ li·ªáu l·∫°*. C√†ng g·∫ßn 1.0 c√†ng t·ªët.")
    st.write("---")

    # --- Thanh b√™n (Sidebar) ƒë·ªÉ nh·∫≠p li·ªáu ---
    st.sidebar.header("Nh·∫≠p th√¥ng tin h·ªçc sinh:")

    # --- Nh√≥m ƒë·∫∑c tr∆∞ng nh√¢n kh·∫©u h·ªçc ---
    st.sidebar.subheader("Th√¥ng tin c∆° b·∫£n")
    age = st.sidebar.slider(
        "Tu·ªïi (Age):",
        min_value=slider_ranges['Age'][0], 
        max_value=slider_ranges['Age'][1], 
        value=15
    )
    gender = st.sidebar.selectbox(
        "Gi·ªõi t√≠nh (Gender):",
        unique_genders
    )
    school_grade = st.sidebar.selectbox(
        "Kh·ªëi l·ªõp (School_Grade):",
        unique_grades
    )
    
    # --- Nh√≥m ƒë·∫∑c tr∆∞ng s·ª≠ d·ª•ng ---
    st.sidebar.subheader("Th√≥i quen s·ª≠ d·ª•ng")
    daily_usage = st.sidebar.slider(
        "Gi·ªù d√πng trung b√¨nh/ng√†y (Daily_Usage_Hours):",
        min_value=slider_ranges['Daily_Usage_Hours'][0], 
        max_value=slider_ranges['Daily_Usage_Hours'][1], 
        value=5.0, 
        step=0.1
    )
    sleep = st.sidebar.slider(
        "Gi·ªù ng·ªß/ƒë√™m (Sleep_Hours):",
        min_value=slider_ranges['Sleep_Hours'][0], 
        max_value=slider_ranges['Sleep_Hours'][1], 
        value=7.0, 
        step=0.1
    )
    phone_purpose = st.sidebar.selectbox(
        "M·ª•c ƒë√≠ch d√πng ch√≠nh (Phone_Usage_Purpose):",
        unique_purposes
    )

    # --- Nh√≥m ƒë·∫∑c tr∆∞ng t√¢m l√Ω / h·ªçc v·∫•n ---
    st.sidebar.subheader("S·ª©c kh·ªèe & H·ªçc t·∫≠p (1-10)")
    academic = st.sidebar.slider(
        "K·∫øt qu·∫£ h·ªçc t·∫≠p (Academic_Performance 0-100):",
        min_value=slider_ranges['Academic_Performance'][0], 
        max_value=slider_ranges['Academic_Performance'][1], 
        value=75
    )
    anxiety = st.sidebar.slider(
        "M·ª©c ƒë·ªô Lo √¢u (Anxiety_Level):",
        min_value=slider_ranges['Anxiety_Level'][0], 
        max_value=slider_ranges['Anxiety_Level'][1], 
        value=5
    )
    depression = st.sidebar.slider(
        "M·ª©c ƒë·ªô Tr·∫ßm c·∫£m (Depression_Level):",
        min_value=slider_ranges['Depression_Level'][0], 
        max_value=slider_ranges['Depression_Level'][1], 
        value=5
    )
    self_esteem = st.sidebar.slider(
        "L√≤ng T·ª± tr·ªçng (Self_Esteem):",
        min_value=slider_ranges['Self_Esteem'][0], 
        max_value=slider_ranges['Self_Esteem'][1], 
        value=5
    )


    # --- N√∫t d·ª± ƒëo√°n ---
    if st.sidebar.button("Nh·∫•n ƒë·ªÉ D·ª± ƒëo√°n"):

        # 1. T·∫°o DataFrame t·ª´ d·ªØ li·ªáu nh·∫≠p v√†o
        # T√™n c·ªôt PH·∫¢I Y H·ªÜT nh∆∞ trong danh s√°ch 'features'
        input_data = {
            'Age': [age],
            'Gender': [gender],
            'School_Grade': [school_grade],
            'Daily_Usage_Hours': [daily_usage],
            'Sleep_Hours': [sleep],
            'Academic_Performance': [academic],
            'Anxiety_Level': [anxiety],
            'Depression_Level': [depression],
            'Self_Esteem': [self_esteem],
            'Phone_Usage_Purpose': [phone_purpose]
        }
        input_df = pd.DataFrame(input_data)

        st.subheader("Th√¥ng tin b·∫°n ƒë√£ nh·∫≠p:")
        st.dataframe(input_df) 

        # 2. G·ªçi pipeline ƒë·ªÉ d·ª± ƒëo√°n
        prediction = pipeline.predict(input_df)
        predicted_score = prediction[0]

        # 3. Hi·ªÉn th·ªã k·∫øt qu·∫£
        st.subheader("K·∫øt qu·∫£ D·ª± ƒëo√°n:")
        
        # D√πng thang ƒëi·ªÉm 1-10 cho d·ªÖ hi·ªÉu (gi·ªëng nh∆∞ c√°c thang ƒëo t√¢m l√Ω)
        st.metric(
            label="ƒêi·ªÉm Nghi·ªán D·ª± ƒëo√°n (Addiction_Level)",
            value=f"{predicted_score:.4f}",
        )
        
        # ƒê√°nh gi√° nhanh m·ª©c ƒë·ªô (Gi·∫£ s·ª≠ thang ƒëi·ªÉm 1-10)
        if predicted_score >= 8.0:
            st.error("üö® M·ª©c ƒë·ªô nghi·ªán d·ª± ƒëo√°n: R·∫•t Cao")
        elif predicted_score >= 6.0:
            st.warning("‚ö†Ô∏è M·ª©c ƒë·ªô nghi·ªán d·ª± ƒëo√°n: Cao")
        elif predicted_score >= 4.0:
            st.info("‚ÑπÔ∏è M·ª©c ƒë·ªô nghi·ªán d·ª± ƒëo√°n: Trung b√¨nh")
        else:
            st.success("‚úÖ M·ª©c ƒë·ªô nghi·ªán d·ª± ƒëo√°n: Th·∫•p")

    else:
        st.info("üëà Nh·∫≠p th√¥ng tin ·ªü thanh b√™n tr√°i v√† nh·∫•n n√∫t 'Nh·∫•n ƒë·ªÉ D·ª± ƒëo√°n'.")
